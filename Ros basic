theconstructsim ros basic 5 days
part 2. ros basic
2017136056 신길종 2021.09.24

roslaunch <패키지 이름> <실행 파일>

Ros패키지의 구조 
1. launch : 실행파일
2. src : 소스코드 파일
3. CMakeLists.txt : 컴파일을 위한 규칙 목록?
4. package.xml : 패키지 정보 및 종속성

roscd <package_name> : Ros패키지 경로로 이동하는 명령어
실행할 모든 Ros프로그램은 패키지로 구성되어야 하며 생성하는 모든 ros프로그램은 패키지 내에 생성되어야 한다.

cat : 파일의 내용을 간단하게 출력할 때 사용

roslaunch 파일 해석 (theconstructsim tutlebot )
  <launch>
    <!-- turtlebot_teleop_key already has its own built in velocity smoother -->
    <node pkg="turtlebot_teleop" type="turtlebot_teleop_key.py" name="turtlebot_teleop_keyboard" output="screen">
      <param name="scale_linear" value="0.5" type="double"/>
      <param name="scale_angular" value="1.5" type="double"/>
      <remap from="turtlebot_teleop_keyboard/cmd_vel" to="/cmd_vel"/>   <!-- cmd_vel_mux/input/teleop"/-->
    </node>
  </launch>
태그들은 무시하고 먼저 노드에 집중해보면 pkg="turtlebot_teleop" > 실행할 ros 프로그램의 코드가 들어있는 패키지 이름
                                      type="turtlebot_teleop_key.py" > 실행할 코드파일
 type과 name의 차이?                   name="turtlebot_teleop_keyboard" > 파이썬 파일을 시작할 ros 노드 이름(실행파일이름과 겹침)
                                      output="screen" > 파일을 출력할 출력 타입
                                      
ros패키지를 생성하려면 특정한 작업공간인 caktin_ws를 만든다.
caktin_ws는 devel, build, src로 구성된다. *catkin_ws의 src폴더는 패키지를 저장하는 공간,  패키지폴더의 src폴더는 소스코드를 저장하는 공간
생성되는 모든 패키지는 src에 저장된다.

*chomd는 파일의 권한을 주는 명령어이다. 파일의 권한은 ls -l을 통해 확인할 수 있고 권한은 4부분으로 분류하여 파일(-) 디렉토리(d) / 사용자(u) / 그룹(g) / 다른 사용자(O)
*chmod u+x <file_name> 소유자에게 실행권한을 부여 chmod o-r <file_name> 다른 사용자에게 읽기 권한을 뺏음

패키지를 만드는 명령어 : catkin_create_pkg <package_name> <package_dependecies>(패키지가 종속된 다른 ros패키지 이름)*catkin_ws의 src폴더 안에 생성해야 함
touch <file_name> : 파일의 날짜시간 정보를 변경하는 명령어, 특정 옵션이 사용되지 않는다면 파일의 크기가 0인 빈 파일을 생성
간단한 로스프로그램을 만드는 예제(roscd my_package)
1. src폴더안에 simple.py를 생성 *파일 상단에 #! /usr/bin/env python 작성 필수 > 사용자 환경의 $PATH에서 가장 먼저 사용되는 인터프리터를 보장
2. my_package 폴더 안에 실행파일 폴더인 launch폴더 생성
3. launch폴더 안에 my_package_launch_file.launch라는 파일 생성 후 위 launch파일과 비슷하게 작성
4. simple.py 코드에서 생성한 노드 이름과 my_package_launch_file.launch파일의 name을 일치시켜줌
5. roslaunch <패키지 이름> <실행 파일> 명령어를 이용하여 실행

노드란 무엇인가 ? ros 노드는 기본적으로 ros로 만들어진 프로그램
rosnode list : 실행중인 node를 출력하는 명령어
rosnode info <node_name> : 노드의 정보를 출력하는 명령어
rosnode kill : 실행중인 node를 종료

패키지를 컴파일하는 다른 방법 2가지 (*컴파일 후에는 source devel/setup.bash 명령어를 입력하여 최신의 작업공간 유지)
1. catkin_make : 일반적인 방법으로 catkin_ws 디렉토리로 이동하여 전체 src 디렉토리를 컴파일함, 꼭 catkin_ws 디렉토리에서 실행해야 됨
                 source devel/setup.bash 를 입력하면 ros가 항상 최신 작업공간으로 유지됨
                 catkin_make --only-pkg-with-deps <package_name> 를 입력하면 원하는 패키지만 컴파일 가능
2. catkin build : catkin_make와 같게 동작, catkin_make와 혼합하여 사용하면 오류발생 
                 Error발생시 rm -rf build/ devel/을 통해 기존에 컴파일된 파일을 제거 후 빌드
                 catkin build <package_name> 를 입력하면 원하는 패키지만 컴파일 가능
         
Parameter Server : 매개 변수 서버는 ros가 매개 변수를 저장하는 데 사용하는 사전이다. 매개 변수는 런타임시 노드에 사용할 수 있으며 일반적으로
구성 매개 변수와 같은 정적 데이터에 사용된다.


